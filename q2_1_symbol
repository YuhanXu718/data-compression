import os
import pickle
import heapq
import time
import numpy as np
import matplotlib.pyplot as plt
from scipy.io.wavfile import read as wav_read, write as wav_write

# huffman tree node
class Node:
    def __init__(self, symbol, freq, left=None, right=None):
        self.symbol = symbol
        self.freq = freq
        self.left = left
        self.right = right

    def __lt__(self, other):
        return self.freq < other.freq

# build huffman tree from symbols and frequencies
def build_huffman_tree(symbols, freqs):
    heap = [Node(s, f) for s, f in zip(symbols, freqs)]
    heapq.heapify(heap)
    while len(heap) > 1:
        node1 = heapq.heappop(heap)
        node2 = heapq.heappop(heap)
        merged = Node(None, node1.freq + node2.freq, node1, node2)
        heapq.heappush(heap, merged)
    return heap[0]

# generate code table from huffman tree
def build_huffman_code_table(root):
    code_table = {}
    def dfs(node, code):
        if node.symbol is not None:
            code_table[node.symbol] = code
            return
        dfs(node.left, code + "0")
        dfs(node.right, code + "1")
    dfs(root, "")
    return code_table

# encode symbol sequence into bit string
def huffman_encode(data, code_table, unk_symbol=-1):
    encoded_bits = []
    missing_count = 0
    for symbol in data:
        if symbol in code_table:
            encoded_bits.append(code_table[symbol])
        elif unk_symbol in code_table:
            encoded_bits.append(code_table[unk_symbol])
            missing_count += 1
        else:
            raise ValueError(f"unknown symbol {symbol} not covered by UNK")
    if missing_count > 0:
        print(f"[warning] {missing_count} oov symbols encoded as UNK")
    return "".join(encoded_bits)

# decode bit string into symbol sequence
def huffman_decode(encoded_str, root):
    decoded_symbols = []
    node = root
    for bit in encoded_str:
        node = node.left if bit == '0' else node.right
        if node.symbol is not None:
            decoded_symbols.append(node.symbol)
            node = root
    return np.array(decoded_symbols, dtype=np.int32)

# measure code table size in bytes
def measure_table_size(code_table):
    return len(pickle.dumps(code_table, protocol=pickle.HIGHEST_PROTOCOL))

# plot fft spectrum of audio
def plot_spectrum(signal, sr, title="Spectrum"):
    N = len(signal)
    signal_f = signal.astype(np.float32)
    fft_data = np.fft.fft(signal_f) / N
    freq = np.fft.fftfreq(N, d=1.0/sr)
    magnitude = np.abs(fft_data)
    plt.figure()
    plt.title(title)
    plt.plot(freq, magnitude)
    plt.xlim(0, sr/2)
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Magnitude")
    plt.show()

def main():
    input_wav = "/Users/xuyuhan/PycharmProjects/pythonProject/Data compression/combined.wav"
    output_dir = "/Users/xuyuhan/PycharmProjects/pythonProject/Data compression/q2"
    os.makedirs(output_dir, exist_ok=True)
    train_ratios = [0.1, 0.2, 0.5, 0.8, 1.0]

    # load audio
    sr, data = wav_read(input_wav)
    print(f"audio loaded: {input_wav}, sample rate: {sr}, shape: {data.shape}, dtype: {data.dtype}")
    if data.ndim > 1:
        data = data[:, 0]

    data_32 = data.astype(np.int32)
    total_samples = len(data_32)
    original_bits = total_samples * 16
    UNK_SYMBOL = -1

    # plot top 1000 most frequent PCM values
    unique_vals, counts = np.unique(data_32, return_counts=True)
    freq_pairs = sorted(zip(unique_vals, counts), key=lambda x: x[1], reverse=True)[:1000]
    freq_pairs.sort(key=lambda x: x[0])
    x_vals, y_vals = zip(*freq_pairs)
    plt.figure()
    plt.bar(x_vals, y_vals, width=1.0)
    plt.title("Top 1000 values of PCM symbol")
    plt.xlabel("Values")
    plt.ylabel("Counts")
    plt.show()

    results = []
    for ratio in train_ratios:
        train_size = max(1, min(int(total_samples * ratio), total_samples))
        ratio_percent = int(ratio * 100)
        print(f"\n=== train ratio: {ratio_percent}% (train_size={train_size} / {total_samples}) ===")

        # build huffman tree
        train_data = data_32[:train_size]
        uniq_vals, freq_vals = np.unique(train_data, return_counts=True)
        uniq_extended = np.append(uniq_vals, UNK_SYMBOL)
        freq_extended = np.append(freq_vals, 1)

        start_build = time.time()
        root = build_huffman_tree(uniq_extended, freq_extended)
        code_table = build_huffman_code_table(root)
        build_time = time.time() - start_build
        table_size_bytes = measure_table_size(code_table)
        table_size_mb = table_size_bytes / (1024*1024)
        print(f"  huffman table size: {table_size_bytes} bytes, build time: {build_time:.3f}s")

        # encode and decode
        start_enc = time.time()
        encoded_str = huffman_encode(data_32, code_table, unk_symbol=UNK_SYMBOL)
        enc_time = time.time() - start_enc

        start_dec = time.time()
        decoded_symbols = huffman_decode(encoded_str, root)
        dec_time = time.time() - start_dec

        # calculate compression and accuracy
        compressed_bits = len(encoded_str)
        comp_ratio = (1- (compressed_bits / original_bits )) * 100 if compressed_bits else float('inf')
        accuracy = (decoded_symbols == data_32).mean() * 100.0
        print(f"  enc_time={enc_time:.3f}s, dec_time={dec_time:.3f}s, compressed_bits={compressed_bits}, "
              f"compression ratioâ‰ˆ{comp_ratio:.2f}%, accuracy={accuracy:.2f}%")

        # save decoded audio
        decoded_16 = np.where(decoded_symbols == UNK_SYMBOL, 0, decoded_symbols).astype(np.int16)
        out_wav_path = os.path.join(output_dir, f"decoded_{ratio_percent}.wav")
        wav_write(out_wav_path, sr, decoded_16)
        print(f"  decoded audio saved: {out_wav_path}")

        # plot spectrum
        #plot_spectrum(data, sr, title="Original Audio Spectrum")
        #plot_spectrum(decoded_16, sr, title=f"Decoded Audio Spectrum - {ratio_percent}%")

        results.append({
            "train_ratio": ratio,
            "table_size_mb": table_size_mb,
            "build_time": build_time,
            "enc_time": enc_time,
            "dec_time": dec_time,
            "compressed_bits": compressed_bits,
            "compression_ratio": comp_ratio,
            "accuracy": accuracy
        })

    # summary
    print("\n======= summary (by train ratio) =======")
    print("ratio(%) | table size (MB) | build(s) | enc(s) | dec(s) | compressed bits | ratio(%) | acc(%)")
    for r in results:
        rp = int(r['train_ratio'] * 100)
        print(f"{rp:3d}%  | {r['table_size_mb']:^2f} | {r['build_time']:^7.3f} | "
              f"{r['enc_time']:^6.3f} | {r['dec_time']:^6.3f} | {r['compressed_bits']:^15d} | "
              f"{r['compression_ratio']:^9.2f} | {r['accuracy']:^7.2f}")

if __name__ == "__main__":
    main()
